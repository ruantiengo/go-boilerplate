// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO Transaction (bank_slip_uuid, status, created_at, updated_at, payment_method)
VALUES ($1, $2, $3, $4, $5)
RETURNING bank_slip_uuid, status, created_at, updated_at, payment_method
`

type CreateTransactionParams struct {
	BankSlipUuid  uuid.UUID
	Status        NullTransactionStatus
	CreatedAt     time.Time
	UpdatedAt     time.Time
	PaymentMethod NullPaymentMethod
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.BankSlipUuid,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PaymentMethod,
	)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec

DELETE FROM Transaction
WHERE bank_slip_uuid = $1
`

// Added missing semicolon here
func (q *Queries) DeleteTransaction(ctx context.Context, bankSlipUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, bankSlipUuid)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT bank_slip_uuid, status, created_at, updated_at, payment_method
FROM Transaction
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.BankSlipUuid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PaymentMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByUUID = `-- name: GetTransactionByUUID :one
SELECT bank_slip_uuid, status, created_at, updated_at, payment_method
FROM Transaction
WHERE bank_slip_uuid = $1
`

func (q *Queries) GetTransactionByUUID(ctx context.Context, bankSlipUuid uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByUUID, bankSlipUuid)
	var i Transaction
	err := row.Scan(
		&i.BankSlipUuid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PaymentMethod,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE Transaction
SET
    status = COALESCE($1, status),
    updated_at = COALESCE($2, updated_at),
    payment_method = COALESCE($3, payment_method)
WHERE bank_slip_uuid = $4
`

type UpdateTransactionParams struct {
	Status        NullTransactionStatus
	UpdatedAt     time.Time
	PaymentMethod NullPaymentMethod
	BankSlipUuid  uuid.UUID
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction,
		arg.Status,
		arg.UpdatedAt,
		arg.PaymentMethod,
		arg.BankSlipUuid,
	)
	return err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE Transaction
SET status = $1, updated_at = $2
WHERE bank_slip_uuid = $3
`

type UpdateTransactionStatusParams struct {
	Status       NullTransactionStatus
	UpdatedAt    time.Time
	BankSlipUuid uuid.UUID
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus, arg.Status, arg.UpdatedAt, arg.BankSlipUuid)
	return err
}
