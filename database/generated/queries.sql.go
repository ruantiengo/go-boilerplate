// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transaction (id, status, created_at, updated_at, due_date, total, customer_id, tenant_id, branch_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, bank_slip_uuid, status, created_at, updated_at, due_date, total, customer_id, tenant_id, branch_id, payment_method
`

type CreateTransactionParams struct {
	ID         uuid.UUID
	Status     NullTransactionStatus
	CreatedAt  time.Time
	UpdatedAt  time.Time
	DueDate    time.Time
	Total      string
	CustomerID string
	TenantID   string
	BranchID   string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DueDate,
		arg.Total,
		arg.CustomerID,
		arg.TenantID,
		arg.BranchID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.BankSlipUuid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DueDate,
		&i.Total,
		&i.CustomerID,
		&i.TenantID,
		&i.BranchID,
		&i.PaymentMethod,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transaction WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, bank_slip_uuid, status, created_at, updated_at, due_date, total, customer_id, tenant_id, branch_id, payment_method FROM transaction WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.BankSlipUuid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DueDate,
		&i.Total,
		&i.CustomerID,
		&i.TenantID,
		&i.BranchID,
		&i.PaymentMethod,
	)
	return i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transaction SET status = $2, updated_at = $3 WHERE id = $1
`

type UpdateTransactionStatusParams struct {
	ID        uuid.UUID
	Status    NullTransactionStatus
	UpdatedAt time.Time
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
