// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type PaymentMethod string

const (
	PaymentMethodBill       PaymentMethod = "bill"
	PaymentMethodPix        PaymentMethod = "pix"
	PaymentMethodCreditCard PaymentMethod = "credit_card"
)

func (e *PaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethod(s)
	case string:
		*e = PaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentMethod struct {
	PaymentMethod PaymentMethod
	Valid         bool // Valid is true if PaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethod), nil
}

type TransactionStatus string

const (
	TransactionStatusPending   TransactionStatus = "pending"
	TransactionStatusCancelled TransactionStatus = "cancelled"
	TransactionStatusExpired   TransactionStatus = "expired"
	TransactionStatusApproved  TransactionStatus = "approved"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus
	Valid             bool // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type Branchdailystat struct {
	ID                int32
	TenantID          string
	BranchID          string
	Date              time.Time
	TotalBoletos      sql.NullInt32
	TotalPagos        sql.NullInt32
	ValorEmitido      sql.NullString
	ValorRecebido     sql.NullString
	BoletosCancelados sql.NullInt32
	ValorCancelado    sql.NullString
	BoletosAtrasados  sql.NullInt32
	TotalDiasAtraso   sql.NullString
}

type Customermonthlystat struct {
	ID                     int32
	CustomerDocumentNumber string
	TenantID               string
	Month                  time.Time
	TotalBoletos           sql.NullInt32
	TotalPagos             sql.NullInt32
	ValorEmitido           sql.NullString
	ValorRecebido          sql.NullString
	BoletosAtrasados       sql.NullInt32
	TotalDiasAtraso        sql.NullString
}

type SchemaMigration struct {
	Version int64
	Dirty   bool
}

type Transaction struct {
	ID                     uuid.UUID
	BankSlipUuid           uuid.NullUUID
	Status                 NullTransactionStatus
	CreatedAt              time.Time
	UpdatedAt              time.Time
	DueDate                time.Time
	Total                  string
	CustomerDocumentNumber string
	TenantID               string
	BranchID               string
	PaymentMethod          NullPaymentMethod
}
